// Autogenerated from Pigeon (v13.1.1), do not edit directly.
// See also: https://pub.dev/packages/pigeon
// ignore_for_file: public_member_api_docs, non_constant_identifier_names, avoid_as, unused_import, unnecessary_parenthesis, prefer_null_aware_operators, omit_local_variable_types, unused_shown_name, unnecessary_import

import 'dart:async';
import 'dart:typed_data' show Float64List, Int32List, Int64List, Uint8List;

import 'package:flutter/foundation.dart' show ReadBuffer, WriteBuffer;
import 'package:flutter/services.dart';

PlatformException _createConnectionError(String channelName) {
  return PlatformException(
    code: 'channel-error',
    message: 'Unable to establish connection on channel: "$channelName".',
  );
}

List<Object?> wrapResponse({Object? result, PlatformException? error, bool empty = false}) {
  if (empty) {
    return <Object?>[];
  }
  if (error == null) {
    return <Object?>[result];
  }
  return <Object?>[error.code, error.message, error.details];
}

class WatchtowerScreenRecordingApi {
  /// Constructor for [WatchtowerScreenRecordingApi].  The [binaryMessenger] named argument is
  /// available for dependency injection.  If it is left null, the default
  /// BinaryMessenger will be used which routes to the host platform.
  WatchtowerScreenRecordingApi({BinaryMessenger? binaryMessenger})
      : _binaryMessenger = binaryMessenger;
  final BinaryMessenger? _binaryMessenger;

  static const MessageCodec<Object?> codec = StandardMessageCodec();

  Future<void> startRecorder(int arg_interval) async {
    const String channelName = 'dev.flutter.pigeon.com.watchtower.plugin.WatchtowerScreenRecordingApi.startRecorder';
    final BasicMessageChannel<Object?> channel = BasicMessageChannel<Object?>(
      channelName,
      codec,
      binaryMessenger: _binaryMessenger,
    );
    final List<Object?>? replyList =
        await channel.send(<Object?>[arg_interval]) as List<Object?>?;
    if (replyList == null) {
      throw _createConnectionError(channelName);
    } else if (replyList.length > 1) {
      throw PlatformException(
        code: replyList[0]! as String,
        message: replyList[1] as String?,
        details: replyList[2],
      );
    } else {
      return;
    }
  }
}

abstract class WatchtowerScreenRecordingFlutterListener {
  static const MessageCodec<Object?> codec = StandardMessageCodec();

  void takeScreenshot(Uint8List frame);

  static void setup(WatchtowerScreenRecordingFlutterListener? api, {BinaryMessenger? binaryMessenger}) {
    {
      final BasicMessageChannel<Object?> channel = BasicMessageChannel<Object?>(
          'dev.flutter.pigeon.com.watchtower.plugin.WatchtowerScreenRecordingFlutterListener.takeScreenshot', codec,
          binaryMessenger: binaryMessenger);
      if (api == null) {
        channel.setMessageHandler(null);
      } else {
        channel.setMessageHandler((Object? message) async {
          assert(message != null,
          'Argument for dev.flutter.pigeon.com.watchtower.plugin.WatchtowerScreenRecordingFlutterListener.takeScreenshot was null.');
          final List<Object?> args = (message as List<Object?>?)!;
          final Uint8List? arg_frame = (args[0] as Uint8List?);
          assert(arg_frame != null,
              'Argument for dev.flutter.pigeon.com.watchtower.plugin.WatchtowerScreenRecordingFlutterListener.takeScreenshot was null, expected non-null Uint8List.');
          try {
            api.takeScreenshot(arg_frame!);
            return wrapResponse(empty: true);
          } on PlatformException catch (e) {
            return wrapResponse(error: e);
          }          catch (e) {
            return wrapResponse(error: PlatformException(code: 'error', message: e.toString()));
          }
        });
      }
    }
  }
}
